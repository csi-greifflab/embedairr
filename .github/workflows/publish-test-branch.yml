name: Publish Test Branch to TestPyPI

on:
  push:
    branches: [ test ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build-and-publish-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Update version for test branch
      run: |
        # Get current timestamp for unique version
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        # Update version in pyproject.toml to include test identifier (no local version)
        sed -i "s/version = \"1.0.0-dev1\"/version = \"1.0.0.dev${TIMESTAMP}\"/" pyproject.toml
        echo "Updated version to test build"
        grep "version =" pyproject.toml
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Publish to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: twine upload --repository testpypi dist/*
    
    - name: Output installation command
      run: |
        echo "Package published to TestPyPI!"
        echo "To install the test version, run:"
        echo "pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple pypepe"
    
    - name: Wait for package availability
      run: |
        echo "Waiting for package to be available on TestPyPI..."
        sleep 30
    
    - name: Test installation and functionality
      run: |
        # Create a fresh virtual environment for testing
        python -m venv test_env
        source test_env/bin/activate
        
        # Install the package from TestPyPI
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple pypepe
        
        # Verify installation
        pip list | grep pypepe
        
        # Test basic import
        python -c "import pepe; print('Package imported successfully')"
        
        # Run the test script
        echo "Running test script..."
        chmod +x src/tests/test_run.sh
        bash src/tests/test_run.sh
        
        # Check if test output was created
        if [ -d "src/tests/test_files/test_output" ]; then
          echo "✅ Test completed successfully - output directory created"
          ls -la src/tests/test_files/test_output/
        else
          echo "❌ Test failed - no output directory found"
          exit 1
        fi
        
        # Clean up
        deactivate
        rm -rf test_env
        
        echo "✅ Package verification completed successfully!"
